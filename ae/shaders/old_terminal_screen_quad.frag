#version 330 core

in VS_OUT {
    vec2 texCoords;
    vec4 color;
} fs_in;

uniform sampler2D u_texture;
uniform float u_time; // –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

out vec4 fragColor;

// –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —à—É–º–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
float random(vec2 p) {
    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);
}

float offset(float blocks, vec2 uv) {
        return random(vec2(u_time, floor(uv.y * blocks)));
}

void main()
{
    vec2 uv = fs_in.texCoords;

    // üì∫ –°–∫–∞–Ω–ª–∞–π–Ω—ã ‚Äî –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    float scanline = 0.95 + 0.02 * sin(uv.y * 800.0);

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Å —à—É–º–æ–º
    vec4 texColor = texture(u_texture, uv);

    texColor.r = texture(u_texture, uv + vec2(offset(10.0, uv) * 0.0005, 0.0)).r;
    texColor.g = texture(u_texture, uv + vec2(offset(10.0, uv) * 0.0005, 0.0)).g;
    texColor.b = texture(u_texture, uv + vec2(offset(10.0, uv) * 0.0005, 0.0)).b;

    // üå´ –î–æ–±–∞–≤–∏–º —à—É–º –ø–æ–≤–µ—Ä—Ö
    float noise = (random(uv * u_time) - 0.5) * 0.05;
    texColor.rgb += noise;

    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å—ë: —Ü–≤–µ—Ç * —Å–∫–∞–Ω–ª–∞–π–Ω * —Ü–≤–µ—Ç –≤–µ—Ä—à–∏–Ω—ã
    fragColor = fs_in.color * texColor * scanline;
}
